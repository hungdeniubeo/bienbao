import tkinter as tk
from tkinter import filedialog,simpledialog,messagebox,ttk
from tkinter import *
import json
import cv2
import hashlib
from PIL import ImageTk, Image
import numpy as np
import tensorflow as tf
from keras.models import load_model
from playsound import playsound
import pygame
import subprocess
import os
import sys
import mysql.connector

def connect_db():
    try:
        mydb = mysql.connector.connect(
            host="localhost",
            user="root",
            password="kimem1702",
            database="image_db"
        )
        if mydb.is_connected():
            print("‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng.")
    except mysql.connector.Error as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi MySQL: {e}")

# üü¢ G·ªçi h√†m ki·ªÉm tra
connect_db()

# Load m√¥ h√¨nh nh·∫≠n di·ªán bi·ªÉn b√°o
model = load_model('traffic_sign_model.h5')

labels_file = "labels.json"

classify_b = None

# Load labels from labels.json
def load_labels():
    try:
        with open(labels_file, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# Save labels to labels.json
def save_labels():
    with open(labels_file, "w", encoding="utf-8") as f:
        json.dump(classNames, f, indent=4)

classNames = load_labels()

current_image_path = None  # L∆∞u ·∫£nh v·ª´a t·∫£i l√™n

def get_image_hash(image): # N·∫øu ·∫£nh ƒë√£ c√≥ tr∆∞·ªõc, l·∫•y ra x·ª≠ l√Ω nhanh l·∫°i
    hasher = hashlib.sha256()  
    hasher.update(image.tobytes())  
    return hasher.hexdigest()  

def get_label(label):
    prohibitory = [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 15, 16]
    mandatory = [33, 34, 35, 36, 37, 38, 39, 40]
    danger = [11, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]

    if label in prohibitory:
        return "Bi·ªÉn b√°o c·∫•m"
    elif label in mandatory:
        return "Bi·ªÉn b√°o b·∫Øt bu·ªôc"
    elif label in danger:
        return "Bi·ªÉn b√°o nguy hi·ªÉm"
    else:
        return "Bi·ªÉn b√°o kh√°c"

# T·∫°o giao di·ªán
top = tk.Tk()
top.geometry(f"1000x700+{(top.winfo_screenwidth() - 1000) // 2}+{(top.winfo_screenheight() - 700) // 2}")
img = PhotoImage(file='traffic-light.png')
top.iconphoto(False,img)
top.title('H·ªá th·ªëng nh·∫≠n d·∫°ng bi·ªÉn b√°o giao th√¥ng')
top.configure(background='#CDCDCD')
label = Label(top, background='#CDCDCD', font=('arial', 25, 'bold'))
image_frame = Frame(top,borderwidth=2, relief="ridge", bg="#E0E0E0")
sign_image = Label(image_frame, bg="#E0E0E0")

def classify(file_path):
    global is_recognized
    image = Image.open(file_path) 
    image = image.resize((32, 32))
    image = np.array(image) # chuy·ªÉn ·∫£nh th√†nh m·∫£ng numpy

    image = np.array(image).reshape(-1, 32, 32, 3)
    image = np.array(list(map(preprocessing, image)))
    image = image.reshape(-1, 32, 32, 1)
    
    Y_pred = model.predict([image])[0]
    max_prob = np.max(Y_pred)
    index = np.argmax(Y_pred)
    
    if str(index) in classNames:
        sign = classNames[str(index)]
        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ƒë·ªãnh d·∫°ng kh√°c nhau trong classNames
        if "\n" in sign:
            type_text, sign_name = sign.split("\n", 1)
            label.configure(foreground='#011638', text=(type_text + "\n" + sign_name))
        else:
            type_text = get_label(index)
            label.configure(foreground='#011638', text=(type_text + "\n" + sign))
        is_recognized = True  # ƒê√°nh d·∫•u ·∫£nh ƒë√£ ƒë∆∞·ª£c nh·∫≠n di·ªán
    elif max_prob < 0.7:
        label.configure(foreground='#011638', text="·∫¢nh m·ªõi, ch∆∞a nh·∫≠n di·ªán")
    else:
        label.configure(foreground='#011638', text="Kh√¥ng x√°c ƒë·ªãnh")
            
def preprocessing(img):
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    img = cv2.equalizeHist(img)
    return img / 255

def show_classify_button(file_path):
    global classify_b
    if classify_b is not None:
        classify_b.destroy()
    classify_b = Button(top, text='Nh·∫≠n di·ªán', command=lambda: classify(file_path), padx=10, pady=5)
    classify_b.configure(background='#d93303', foreground='white', font=('arial', 10, 'bold'))
    classify_b.place(relx=0.79, rely=0.46)

def upload_image():
    global current_image_path
    try:
        file_path = filedialog.askopenfilename()
        if not file_path:
            return
        current_image_path = file_path  # L∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh
        uploaded = Image.open(file_path)
        uploaded.thumbnail(((top.winfo_width() / 2.25), (top.winfo_height() / 2.25)))
        im = ImageTk.PhotoImage(uploaded)
        sign_image.configure(image=im)
        sign_image.image = im
        label.configure(text='')
        show_classify_button(current_image_path)  # Hi·ªÉn th·ªã n√∫t nh·∫≠n di·ªán
    except:
        pass

def check_image_existence():
    global current_image_path
    if not current_image_path:
        messagebox.showerror("L·ªói", "Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c ch·ªçn!")
        return False

    image = Image.open(current_image_path).resize((32, 32))
    image = np.array(image).reshape(-1, 32, 32, 3)
    image = np.array(list(map(preprocessing, image))).reshape(-1, 32, 32, 1)

    Y_pred = model.predict([image])[0]
    max_prob = np.max(Y_pred)  # L·∫•y x√°c su·∫•t cao nh·∫•t
    detected = str(np.argmax(Y_pred))  # Nh√£n d·ª± ƒëo√°n
    labels = load_labels()
    if detected in labels and max_prob > 0.7:
        response = messagebox.askyesno("Th√¥ng b√°o","·∫¢nh ƒë√£ c√≥ trong h·ªá th·ªëng, b·∫°n ch·ªâ c√≥ th·ªÉ s·ª≠a th√¥ng tin!\nB·∫°n c√≥ mu·ªën s·ª≠a kh√¥ng?")
        if response:
            edit_label(detected, on_close=lambda: classify(current_image_path))
        else:
            show_classify_button(current_image_path)
        return True

def add_label():
    global current_image_path
    if not current_image_path:
        file_path = filedialog.askopenfilename()
        if not file_path:
            return
        current_image_path = file_path  
        
    uploaded = Image.open(current_image_path)
    uploaded.thumbnail(((top.winfo_width() / 2.25), (top.winfo_height() / 2.25)))
    im = ImageTk.PhotoImage(uploaded)
    sign_image.configure(image=im)
    sign_image.image = im
    
    # Ki·ªÉm tra xem ·∫£nh ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng ch∆∞a
    image = Image.open(current_image_path).resize((32, 32))
    image = np.array(image).reshape(-1, 32, 32, 3)
    image = np.array(list(map(preprocessing, image))).reshape(-1, 32, 32, 1)

    Y_pred = model.predict([image])[0]
    max_prob = np.max(Y_pred)  # L·∫•y x√°c su·∫•t cao nh·∫•t
    detected = str(np.argmax(Y_pred))  # Nh√£n d·ª± ƒëo√°n
    
    # N·∫øu ·∫£nh ƒë√£ c√≥ trong h·ªá th·ªëng v·ªõi ƒë·ªô tin c·∫≠y cao (>= 0.7)
    if detected in classNames and max_prob >= 0.7:
        messagebox.showinfo("Th√¥ng b√°o", "Bi·ªÉn b√°o n√†y ƒë√£ c√≥ trong h·ªá th·ªëng, kh√¥ng th·ªÉ th√™m m·ªõi!")
        response = messagebox.askyesno("Th√¥ng b√°o", "B·∫°n c√≥ mu·ªën s·ª≠a th√¥ng tin bi·ªÉn b√°o n√†y kh√¥ng?")
        if response:
            edit_label(detected, on_close=lambda: classify(current_image_path))
        else:
            # Hi·ªÉn th·ªã n√∫t nh·∫≠n di·ªán n·∫øu ng∆∞·ªùi d√πng kh√¥ng mu·ªën s·ª≠a
            show_classify_button(current_image_path)
        return

    # N·∫øu ·∫£nh ch∆∞a c√≥ trong h·ªá th·ªëng ho·∫∑c c√≥ ƒë·ªô tin c·∫≠y th·∫•p, cho ph√©p th√™m m·ªõi
    add_window = tk.Toplevel(top)
    add_window.title("Th√™m bi·ªÉn b√°o")
    add_window.geometry('200x150')
    add_window.update_idletasks()
    x = (top.winfo_screenwidth() - add_window.winfo_reqwidth()) // 2
    y = (top.winfo_screenheight() - add_window.winfo_reqheight()) // 2
    add_window.geometry(f"+{x}+{y}")
    
    tk.Label(add_window, text="Ch·ªçn lo·∫°i bi·ªÉn b√°o:").pack()
    category_var = tk.StringVar()
    category_combobox = ttk.Combobox(add_window, textvariable=category_var, 
                                     values=["Bi·ªÉn b√°o c·∫•m", "Bi·ªÉn b√°o b·∫Øt bu·ªôc", "Bi·ªÉn b√°o nguy hi·ªÉm", "Bi·ªÉn b√°o kh√°c"])
    category_combobox.pack()
    category_combobox.current(0)
    
    tk.Label(add_window, text="Nh·∫≠p t√™n bi·ªÉn b√°o:").pack()
    name_entry = tk.Entry(add_window)
    name_entry.pack()
    
    def save_label():
        category = category_var.get()
        name = name_entry.get().strip()
        if not name:
            messagebox.showerror("L·ªói", "T√™n bi·ªÉn b√°o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return 
        
        # L·∫•y l·∫°i d·ª± ƒëo√°n cho ·∫£nh hi·ªán t·∫°i
        image = Image.open(current_image_path).resize((32, 32))
        image = np.array(image).reshape(-1, 32, 32, 3)
        image = np.array(list(map(preprocessing, image))).reshape(-1, 32, 32, 1)
        Y_pred = model.predict([image])[0]
        predicted_index = str(np.argmax(Y_pred))
        
        # T√¨m ID m·ªõi cho bi·ªÉn b√°o
        available_ids = [int(k) for k in classNames.keys() if k.isdigit()]
        new_id = str(max(available_ids) + 1) if available_ids else "0"
        
        # L∆∞u th√¥ng tin bi·ªÉn b√°o m·ªõi
        classNames[new_id] = f"{category}\n{name}"
        save_labels()
        messagebox.showinfo("Th√¥ng b√°o", "Th√™m th√†nh c√¥ng!")
        add_window.destroy()
        show_classify_button(current_image_path)
        
        # C·∫≠p nh·∫≠t hi·ªÉn th·ªã sau khi th√™m
        label_text = f"{category}\n{name}"
        label.configure(foreground='#011638', text=label_text)
        
        # L∆∞u √Ω cho ng∆∞·ªùi d√πng v·ªÅ vi·ªác ph·∫£i hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh
        messagebox.showinfo("L∆∞u √Ω", "Bi·ªÉn b√°o ƒë√£ ƒë∆∞·ª£c th√™m v√†o c∆° s·ªü d·ªØ li·ªáu, nh∆∞ng m√¥ h√¨nh c·∫ßn ƒë∆∞·ª£c hu·∫•n luy·ªán l·∫°i ƒë·ªÉ nh·∫≠n di·ªán ch√≠nh x√°c lo·∫°i bi·ªÉn b√°o n√†y trong t∆∞∆°ng lai.")
    
    tk.Button(add_window, text="Th√™m", command=save_label, bg="green", fg="white").pack(pady=10)
        
def open_edit_label():
    global current_image_path
    if not current_image_path:
        messagebox.showerror("L·ªói", "C·∫ßn t·∫£i ·∫£nh l√™n tr∆∞·ªõc khi s·ª≠a")
        return

    image = Image.open(current_image_path).resize((32, 32))
    image = np.array(image).reshape(-1, 32, 32, 3)
    image = np.array(list(map(preprocessing, image))).reshape(-1, 32, 32, 1)

    Y_pred = model.predict([image])[0]
    detected_index = str(np.argmax(Y_pred))  # L·∫•y index d·ª± ƒëo√°n t·ª´ m√¥ h√¨nh

    labels = load_labels()
    if detected_index in labels:
        edit_label(detected_index, on_close=lambda: classify(current_image_path))  # C·∫≠p nh·∫≠t sau khi s·ª≠a
    else:
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y bi·ªÉn b√°o ƒë·ªÉ s·ª≠a!")
  
def reset_image():
    global current_image_path, classify_b, is_recognized, custom_labels

    # X√≥a ƒë∆∞·ªùng d·∫´n ·∫£nh hi·ªán t·∫°i v√† reset tr·∫°ng th√°i nh·∫≠n di·ªán
    current_image_path = None  
    is_recognized = False  

    # X√≥a ·∫£nh hi·ªÉn th·ªã v√† k·∫øt qu·∫£ nh·∫≠n di·ªán tr√™n giao di·ªán
    sign_image.configure(image='', text="")
    label.configure(text="")

    # ·∫®n n√∫t "Nh·∫≠n di·ªán" 
    if classify_b is not None:
        classify_b.destroy()
        classify_b = None

def edit_label(index,   on_close=None):
    labels = load_labels()

    if index not in labels:
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y bi·ªÉn b√°o ƒë·ªÉ s·ª≠a!")
        return

    label_text = labels[index]
    category, sign_name = label_text.split("\n", 1) if "\n" in label_text else ("Bi·ªÉn b√°o kh√°c", label_text)

    edit_window = tk.Toplevel(top)
    edit_window.title("S·ª≠a bi·ªÉn b√°o")
    edit_window.geometry('200x150')
    edit_window.update_idletasks()
    x = (top.winfo_screenwidth() - edit_window.winfo_reqwidth()) // 2
    y = (top.winfo_screenheight() - edit_window.winfo_reqheight()) // 2
    edit_window.geometry(f"+{x}+{y}")

    tk.Label(edit_window, text="Ch·ªçn lo·∫°i bi·ªÉn b√°o:").pack()
    category_var = tk.StringVar(value=category)
    category_combobox = ttk.Combobox(edit_window, textvariable=category_var, 
                                     values=["Bi·ªÉn b√°o c·∫•m", "Bi·ªÉn b√°o b·∫Øt bu·ªôc", "Bi·ªÉn b√°o nguy hi·ªÉm", "Bi·ªÉn b√°o kh√°c"])
    category_combobox.pack()

    tk.Label(edit_window, text="Nh·∫≠p t√™n bi·ªÉn b√°o m·ªõi:").pack()
    name_entry = tk.Entry(edit_window)
    name_entry.insert(0, sign_name)
    name_entry.pack()

    def save_edit():
        new_category = category_var.get()
        new_name = name_entry.get().strip()
        if not new_name:
            messagebox.showerror("L·ªói", "T√™n bi·ªÉn b√°o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return

        labels[index] = f"{new_category}\n{new_name}"  # L∆∞u c·∫£ danh m·ª•c v√† t√™n bi·ªÉn b√°o
        save_labels()
        messagebox.showinfo("Th√¥ng b√°o", "S·ª≠a th√†nh c√¥ng!")
        print(f"Labels sau khi s·ª≠a: {load_labels()}")
        edit_window.destroy()
        if on_close:
            on_close()
        
    tk.Button(edit_window, text="L∆∞u", command=save_edit, bg="blue", fg="white").pack(pady=10)

def del_img():
    pass

# H√†m ƒë·ªÉ ch·∫°y webcam.py
def open_webcam():
    try:
        # L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa giao di·ªán
        top.iconify()  # Thu nh·ªè c·ª≠a s·ªï hi·ªán t·∫°i
        
        # L·∫•y ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i c·ªßa script
        current_dir = os.path.dirname(os.path.abspath(__file__))
        webcam_path = os.path.join(current_dir, 'webcam.py')
        
        # Ki·ªÉm tra n·∫øu file webcam.py t·ªìn t·∫°i
        if os.path.exists(webcam_path):
            # Ch·∫°y script webcam.py trong m·ªôt ti·∫øn tr√¨nh ri√™ng bi·ªát
            if sys.platform.startswith('win'):
                subprocess.Popen(['python', webcam_path], shell=True)
            else:
                subprocess.Popen(['python3', webcam_path])
            
            # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
            messagebox.showinfo("Webcam", "ƒêang m·ªü ch·∫ø ƒë·ªô webcam. Nh·∫•n 'q' ƒë·ªÉ tho√°t kh·ªèi ch·∫ø ƒë·ªô webcam.")
        else:
            messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y file webcam.py t·∫°i {webcam_path}")
    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü webcam: {str(e)}")
    finally:
        top.deiconify()  # Kh√¥i ph·ª•c c·ª≠a s·ªï hi·ªán t·∫°i sau khi ƒë√≥ng webcam
   
frame_buttons = tk.Frame(top, bg=top["bg"])
frame_buttons.pack(side=BOTTOM,pady=50)

spacer = tk.Frame(frame_buttons, width=55, bg=top["bg"])
spacer.pack(side=RIGHT)  

del_btn = Button(frame_buttons, text="X√≥a bi·ªÉn b√°o", command=del_img, padx=15, pady=8, \
                 background='#007BFF', foreground='white', font=('Arial', 10, 'bold'), \
                 relief="raised", bd=2, cursor="hand2")
del_btn.pack(side=LEFT, padx=12, pady=5)

add_btn = Button(frame_buttons, text="Th√™m bi·ªÉn b√°o", command=add_label, padx=15, pady=8, \
                 background='#007BFF', foreground='white', font=('Arial', 10, 'bold'), \
                 relief="raised", bd=2, cursor="hand2")
add_btn.pack(side=LEFT, padx=12, pady=5)

upload = Button(frame_buttons, text="T·∫£i ·∫£nh l√™n", command=upload_image, padx=15, pady=8, \
                 background='#063970', foreground='white', font=('Arial', 10, 'bold'), \
                 relief="raised", bd=2, cursor="hand2")
upload.pack(side=LEFT, padx=12, pady=5)

edit_btn = Button(frame_buttons, text="S·ª≠a bi·ªÉn b√°o", command=open_edit_label, padx=15, pady=8, \
                 background='#FFA500', foreground='white', font=('Arial', 10, 'bold'), \
                 relief="raised", bd=2, cursor="hand2")
edit_btn.pack(side=LEFT, padx=12, pady=5)

# Th√™m n√∫t webcam
webcam_btn = Button(top, text="Webcam", command=open_webcam, padx=10, pady=8,
                    background='#e91e63', foreground='white', font=('Arial', 10, 'bold'),
                    relief="raised", bd=2, cursor="hand2")

webcam_btn.place(relx=0.1, rely=0.46)


reset_btn = Button(frame_buttons, text="üîÑ", command=reset_image, padx=12, pady=8, \
                 background='#abb794', foreground='white', font=('Arial', 15, 'bold'), \
                 relief="raised", bd=2, cursor="hand2")  
reset_btn.pack(side=LEFT, padx=12, pady=5)

sign_image.pack(padx=5, pady=5)
image_frame.pack(side=BOTTOM, expand=True)
label.pack(side=BOTTOM, expand=True)

heading = Label(top, text="Nh·∫≠n d·∫°ng bi·ªÉn b√°o giao th√¥ng b·∫±ng h√¨nh ·∫£nh", pady=20, font=('arial', 20, 'bold'))
heading.configure(background='#CDCDCD', foreground='#364156')
heading.pack()

top.mainloop()